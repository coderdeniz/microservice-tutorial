
Proje
--

-> Catalog.API 

 -> Db tarafýnda MongoDb kullanýlacak.
	-> mongo db tercih etmemizin sebepleri 
	   -> iliþkisel olmayan veritabaný olmasýdýr.
	   -> sütun sayýsý duruma göre artabilir olmasý. (dinamiklik)

 -> Kurslarýn eklenip çýkartýlmasý, fotoðraflarýn url'leri tutulacak.
 
 -> port: http://localhost:6011

 -> Category olacak onlara baðlý course'lar olacak ve course'larýn feature'larý olacak. Ama iliþkisel db'deki gibi olmayacak yani category'si silinen course'lar kaldýrýlmaz. Yada id'si category collection'inda da olmasa dahi course collection'ina ekleyebiliriz.

 -> birebir iliþkide embedded pattern, bire çok da reference pattern kullanýlacak.
 
 
 Portainer 
 --

 -> Container ve image'leri yönetmemizi saðlayan web arayüzüdür.
 -> portainer.io sitesine gir. 
    -> community edition -> docker -> docker volume create portainer_data
	not: --restart=always yaptýðýmýz için her docker açýlýp kapandýðýnda uygulamada açýlacak.

-> IdentityServer Framework

-> Üyelik sistemi için Identity API yapacaðýz.
-> Token daðýtmaktan görevli microservice olacak.
-> Open source yazýlmýþ servislerden yararlanacaðýz.
-> OAuth 2.0 ve OpenID Connect protokollerine uygun.
-> Map: https://localhost:5001/.well-known/openid-configuration
-> ClientCredentials'de refresh tokken yok ama ResourceOwnerPassword'de var.


-> PhotoStock.API

-> db olmayacak foto geldikçe klasöre kaydedecek ve diðer servislere sunacak.
-> port: http://localhost:5012
-> cancellationToken: foto geldiðinde kaydedene kadar endpointi çaðýran yer iþlemi sonlandýrýrsa fotoyu kaydeden yer de sonlansýn kaydetmesin. mesala kullanýcý
fotoyu kaydederken tarayýcýyý kapatýrsa cancellectionToken devreye girer ve dosya kaydetme kapanýr. Asenkron baþlayan iþlemkleri sadece hata fýrlatarak sonlandýrabiliriz.
Cancellationtoken de hata fýrlatýyor.



